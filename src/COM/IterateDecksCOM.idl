// IterateDecksCOM.idl : IDL source for IterateDecksCOM
//

// This file will be processed by the MIDL tool to
// produce the type library (IterateDecksCOM.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(EE6EAD4E-AF5B-4356-90AA-1F0DE44C514E),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IEvaluateDecksCOM : IDispatch{
	[id(1)] HRESULT LoadCardXML([in] BSTR FileName, [out,retval] BYTE* ret);
	[id(2)] HRESULT SetCommander([in] USHORT DeckIndex, [in] SHORT Id, [out,retval] BYTE* ret);
	[id(3)] HRESULT AppendCard([in] USHORT DeckIndex, [in] USHORT Id, [out,retval] BYTE* ret);
	[id(4)] HRESULT AppendCardEx([in] USHORT DeckIndex, [in] USHORT Id, [in] USHORT Attack, [in] SHORT Health, [out,retval] BYTE* ret);
	[id(5)] HRESULT SetEffect([in] USHORT DeckIndex, [in] USHORT CardPosition, [in] BSTR AbilityName, [in] USHORT EffectValue, [out,retval] BYTE* ret);
	[id(6)] HRESULT Attack([in] USHORT DeckIndex);
	[id(7)] HRESULT GetCardAttack([in] USHORT DeckIndex, [in] USHORT RowIndex, [in] USHORT CardPosition, [out,retval] BYTE* ret);
	[id(8)] HRESULT GetCardHealth([in] USHORT DeckIndex, [in] USHORT RowIndex, [in] USHORT CardPosition, [out,retval] BYTE* ret);
	[id(9)] HRESULT GetCardEffect([in] USHORT DeckIndex, [in] USHORT CardPosition, [in] USHORT EffectNo, [out] BSTR* EffectName, [out,retval] BYTE* ret);
};
[
	uuid(673AA27C-34A2-431B-BF7B-80DA399ADDBA),
	version(1.0),
]
library IterateDecksCOMLib
{
	importlib("stdole2.tlb");
	[
		uuid(29150E8B-3944-4957-ADD5-43BCB0625C60)		
	]
	coclass EvaluateDecksCOM
	{
		[default] interface IEvaluateDecksCOM;
	};
};

