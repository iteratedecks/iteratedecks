#get the operating system
OS=$(shell uname -s | tr [:upper:] [:lower:])

#target platforms
TARGET_PLATFORMS=linux mingw32
ARCHIVE_EXTENSIONS=.tar.gz .zip

$(phony ALL): DIRTY_RELEASES SVN_RELEASES

$(phony UPLOAD): UPLOAD_ALPHA

########################################################################
########################################################################

$(phony IS_TESTED): TEST

$(phony TEST): ../src/TEST/test

########################################################################
########################################################################

DIRTY_RELEASES:=$(foreach ext,${ARCHIVE_EXTENSIONS},$(foreach platform,${TARGET_PLATFORMS},DIRTY_${platform}${ext}))
$(phony DIRTY_RELEASES): DIRTY_RELEASES

#dirty head releases
DIRTY_${foreach}.tar.gz: ${foreach}-on-${OS}/release.tar.gz : foreach ${TARGET_PLATFORMS}
    cp -f $(input) $(output)

DIRTY_${foreach}.zip: ${foreach}-on-${OS}/release.zip : foreach ${TARGET_PLATFORMS}
    cp -f $(input) $(output)

########################################################################
########################################################################

$(phony SVN_RELEASES): SVN_ALPHA_RELEASES

$(phony IS_CLEAN_HEAD):
    @if [ `git diff HEAD | wc --chars` -gt 0 ]; then \
        echo "dirty head, can't continue" 1>&2; \
        false; \
    else true; fi

$(phony IS_PUSHED):
    @if [ `git status --branch --porcelain | grep "##" | grep -F "ahead" | wc --chars` -gt 0 ]; then \
        echo "not pushed, can't continue" 1>&2; \
        false; \
    else true; fi

SVN_REVISION=$(shell git svn info | grep "Revision:" | cut -d " " -f 2)

$(phony CAN_SVN_RELEASE): IS_CLEAN_HEAD IS_PUSHED IS_TESTED

SVN_ALPHA_RELEASES:=$(foreach ext,${ARCHIVE_EXTENSIONS},$(foreach platform,${TARGET_PLATFORMS},${SVN_REVISION}_${platform}${ext}))

$(phony SVN_ALPHA_RELEASES): ${SVN_ALPHA_RELEASES}

${SVN_REVISION}_${foreach}.tar.gz: ${foreach}-on-${OS}/release.tar.gz CAN_SVN_RELEASE : foreach ${TARGET_PLATFORMS}
    cp -f $(input) $(output)

${SVN_REVISION}_${foreach}.zip: ${foreach}-on-${OS}/release.zip CAN_SVN_RELEASE : foreach ${TARGET_PLATFORMS}
    cp -f $(input) $(output)

########################################################################
########################################################################
########################################################################

#upload rules

$(phony UPLOAD_ALPHA): UPLOAD_${SVN_ALPHA_RELEASES}

$(phony UPLOAD_${SVN_REVISION}_linux${foreach}): ${SVN_REVISION}_linux${foreach} : foreach ${ARCHIVE_EXTENSIONS}
    sleep 1s
    ./googlecode_upload.py \
    --project=evaluatedecks \
    --summary="linux alpha ${SVN_REVISION}" \
    --labels="OpSys-Linux,Type-Package" \
    $(input)

$(phony UPLOAD_${SVN_REVISION}_mingw32${foreach}): ${SVN_REVISION}_mingw32${foreach} : foreach ${ARCHIVE_EXTENSIONS}
    sleep 1s
    ./googlecode_upload.py \
    --project=evaluatedecks \
    --summary="windows(mingw32) alpha ${SVN_REVISION}" \
    --labels="OpSys-Windows,Type-Package" \
    $(input)
